Index: loginmodule/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render,redirect\r\nfrom django.contrib import messages\r\nfrom django.http import HttpResponse\r\nfrom django.urls import reverse\r\nfrom django.contrib.auth.models import User,auth\r\nfrom django.core.mail import send_mail\r\nfrom django.core.paginator import Paginator\r\nimport math, random\r\nfrom django.db.models import Q\r\nfrom .models import patient_detail\r\nfrom .models import patient_health_detail\r\nfrom .models import Patient_group\r\nfrom .models import Account\r\nfrom medicine.models import Medicine\r\nfrom refdoc.models import RefDoc\r\nfrom refdoc.models import Doc_group\r\nfrom symptoms.models import Symptoms\r\nfrom disease.models import Disease\r\nfrom json import dumps\r\nimport datetime\r\nimport json as simplejson\r\nimport json\r\nfrom django.http import JsonResponse\r\nfrom django.db.models import Count\r\nfrom django.db.models import Sum\r\nfrom django.db.models.functions import TruncMonth,TruncYear\r\nfrom django.db.models.functions import ExtractMonth\r\nfrom django.db.models.functions import ExtractYear\r\nfrom django.db.models import Q\r\nfrom django.utils.datastructures import MultiValueDictKeyError\r\n\r\n# Create your views here.\r\ndef home(request):\r\n\r\n    \r\n    return render(request,'home/index.html')\r\n\r\n\r\ndef main_patient(request):\r\n    patient=patient_detail.objects.all().order_by('-id')\r\n    print(patient)\r\n    paginator=Paginator(patient, 5)\r\n    page_number=request.GET.get('page')\r\n    page_obj=paginator.get_page(page_number)\r\n    return render(request,'home/patients.html',{'patient':patient,'page_obj':page_obj})\r\n\r\ndef addpatient(request):\r\n    return render(request,'home/addpatient.html')\r\n\r\ndef patient_details(request):\r\n\r\n    if request.method==\"POST\":\r\n        fname = request.POST['fname']\r\n        lname = request.POST['lname']\r\n        note = request.POST['note']\r\n        age = request.POST['age']\r\n        weight = request.POST['weight']\r\n        contact = request.POST['contact']\r\n        address = request.POST['address']\r\n        rperson = request.POST['rperson']\r\n        gender = request.POST['gender']\r\n\r\n        user = patient_detail( fname = fname,lname = lname,note = note,age = age, weight =  weight,contact = contact,address = address , rperson = rperson)\r\n        user.save()\r\n\r\n        return redirect('/patients')\r\n    else:\r\n        return redirect('/')\r\n\r\n\r\ndef viewdetail(request,i):\r\n    #here i is patient id\r\n    patient  = patient_detail.objects.get(id=i)\r\n    return render(request,'home/particular_patient_detail.html',{'patient':patient})\r\n\r\ndef editpatientdetail(request,i):\r\n        if request.method==\"POST\":\r\n            fname = request.POST['fname']\r\n            lname = request.POST['lname']\r\n            note = request.POST['note']\r\n            age = request.POST['age']\r\n            weight = request.POST['weight']\r\n            contact = request.POST['contact']\r\n            address = request.POST['address']\r\n            rperson = request.POST['rperson']\r\n\r\n            a=patient_detail.objects.get(id = i)\r\n            a.fname = fname\r\n            a.lname = lname\r\n            a.note = note\r\n            a.age = age\r\n            a.weight = weight\r\n            a.contact = contact\r\n            a.address = address\r\n            a.rperson = rperson\r\n            a.save()\r\n            patient  = patient_detail.objects.get(id=i)\r\n            return render(request,'home/particular_patient_detail.html',{'patient':patient})\r\n        else:\r\n            patient  = patient_detail.objects.get(id=i)\r\n            return render(request,'home/particular_patient_edit_detail.html',{'patient':patient})\r\n\r\n\r\ndef get_or_none(classmodel, **kwargs):\r\n    try:\r\n        return classmodel.objects.get(**kwargs)\r\n    except classmodel.DoesNotExist:\r\n        return None\r\n\r\ndef addpatient_health_details(request,i):\r\n    #i is pid\r\n    patient_health = patient_detail.objects.get(id=i)\r\n    medi=Medicine.objects.all()\r\n    symp=Symptoms.objects.all()\r\n    dies=Disease.objects.all()\r\n    docgroup=Doc_group.objects.all()\r\n    last_five_visit_summary = patient_health_detail.objects.filter(patient_id=i).order_by('-id')[:5]\r\n    last_five_visit_summary_details=[]\r\n   \r\n    for p in last_five_visit_summary:\r\n        jsonDec = json.decoder.JSONDecoder()\r\n        prescription = jsonDec.decode(p.prescription)\r\n        medicine_outside = jsonDec.decode(p.medicine_outside)\r\n        note = jsonDec.decode(p.note)\r\n        note_outside = jsonDec.decode(p.note_outside)\r\n        m_time = jsonDec.decode(p.m_time)\r\n        time_outside = jsonDec.decode(p.time_outside)\r\n        schd_time = jsonDec.decode(p.schd_time)\r\n        schd_outside = jsonDec.decode(p.schd_outside)\r\n        countt = jsonDec.decode(p.countt)\r\n        count_outside = jsonDec.decode(p.count_outside)\r\n       \r\n        print('-------this are medicines data def addpatient health details-------')\r\n        print(prescription)\r\n\r\n        \r\n        last_five_visit_summary_details.append({\"id\":p.id,\"date\":p.date,\"diagnosis\": p.diagnostic,\"symptoms\":p.symptoms,'prescription':prescription,'medicine_outside':medicine_outside,'note':note,'note_outside':note_outside,'m_time':m_time,'time_outside':time_outside,'schd_time':schd_time,'schd_outside':schd_outside,'countt':countt,'count_outside':count_outside})\r\n    \r\n    \r\n    \r\n    # print(\"------------------this is patient--------------\")\r\n    # print(last_five_visit_summary)\r\n    # print(\"------------------this is individual--------------\")\r\n    listnum = [1,2,3,4,5]\r\n    last_five_visit_summary_details1=[]\r\n    last_five_visit_prescription_details=[]\r\n    # for i in last_five_visit_summary:\r\n    #     print(i.id)\r\n    #     print(i.date)\r\n    #     print(i.prescription)\r\n    #     print(i.diagnostic)\r\n    #     print(i.symptoms)\r\n    \r\n\r\n\r\n\r\n    for p,n in zip(last_five_visit_summary_details,listnum):\r\n\r\n        last_five_visit_summary_details1.append({\"p\":p,\"n\":n})   \r\n    \r\n    return render(request,'home/addpatient_health.html',{'patient':patient_health,'pid':patient_health.id,'medi':medi,'symp':symp,'dies':dies,'docgroup':docgroup,'last_five_visit_summary_details':last_five_visit_summary_details1})\r\n\r\n                                                        \r\ndef patient_health_details(request,i):\r\n    # i is pid\r\n    if request.method==\"POST\":\r\n        t1=patient_detail.objects.get(id=i)\r\n        fname=t1.fname\r\n        lname=t1.lname\r\n        symptoms = request.POST.getlist('symptoms')\r\n        diagnostic = request.POST.getlist('diagnostic')\r\n        note = request.POST.getlist('note')\r\n        prescription = request.POST.getlist('prescription')\r\n        timee = request.POST.getlist('time')\r\n        schd_time = request.POST.getlist('schdtime')\r\n        countt = request.POST.getlist('countt')\r\n        printpres = request.POST.getlist('printpres')\r\n        report = request.POST['report']\r\n        fees = request.POST['fees']\r\n        paid = request.POST['paid']\r\n        \r\n        print('-------this are medicines data def patient health details-------')\r\n        print(printpres)\r\n\r\n        \r\n        schd_time.pop(0)\r\n        countt.pop(0)\r\n        timee.pop(0)\r\n        note.pop(0)\r\n\r\n        print('-------this are medicines data 1 def patient health details-------')\r\n        print(prescription) \r\n        print(schd_time) \r\n        print(timee)\r\n        print(note)\r\n        print(countt) \r\n        \r\n\r\n        #------------------------------logic for seprating scdh time----------\r\n        medicine_outside = []\r\n        medcine_temp =[]\r\n        schd_outside =[]\r\n        time_outside =[] \r\n        note_outside =[]\r\n        count_outside =[]  \r\n            \r\n        for l in printpres:# for converting to string\r\n            a=json.loads(l)\r\n            medicine_outside.append(a[2])\r\n            time_outside.append(a[3])\r\n            note_outside.append(a[0])\r\n            count_outside.append(a[1])\r\n            schd_outside.append(a[4])\r\n\r\n        \r\n        for j in medicine_outside: #for removing medicine from precription\r\n            if j in prescription:\r\n                prescription.remove(j)\r\n\r\n        for j in time_outside: #for removing medicine from precription\r\n            if j in timee:\r\n                timee.remove(j)\r\n\r\n        for j in note_outside: #for removing medicine from precription\r\n            if j in note:\r\n                note.remove(j)\r\n\r\n        for j in count_outside: #for removing medicine from precription\r\n            if j in countt:\r\n                countt.remove(j)\r\n\r\n        for j in schd_outside: #for removing medicine from precription\r\n            if j in schd_time:\r\n                schd_time.remove(j)\r\n        \r\n\r\n        print('-------this are medicines out data def patient health details-------')\r\n        print(medicine_outside)\r\n        print(schd_outside) \r\n        print(time_outside)\r\n        print(note_outside)\r\n        print(count_outside)  \r\n                \r\n        # schd_outside.pop(0)\r\n        # count_outside.pop(0)\r\n        # time_outside.pop(0)\r\n        # note_outside.pop(0)\r\n\r\n\r\n        \r\n\r\n\r\n        try:           #---------for ref doc\r\n            refdoc = request.POST['refdoc']\r\n        except MultiValueDictKeyError:\r\n            refdoc = ''\r\n            \r\n        date = datetime.date.today()\r\n        time=datetime.datetime.now().time()\r\n        paid_og=paid\r\n\r\n        #--------------------calculation of settleing account when extra or lee money is added-------------------\r\n\r\n        patient_all_visit_acc=patient_health_detail.objects.filter(patient_id=i)\r\n\r\n        fees1=int(fees)\r\n        paid1=int(paid)\r\n        j=0\r\n        for j in patient_all_visit_acc:\r\n\r\n            if fees1 > paid1:\r\n\r\n                if j.paid > j.fees:\r\n                \r\n                    print('this is >')\r\n                    a = fees1-paid1\r\n                    b=j.paid-j.fees\r\n                    c=a-b\r\n                   #if c>=0:\r\n                    print('-this is b-')\r\n                    print(b)\r\n                    j.paid=j.paid-b\r\n                    print(paid1)\r\n                    paid1 = paid1+b\r\n                    print(paid1)\r\n                    paid = paid1\r\n                    \r\n                    \r\n                    b=patient_health_detail.objects.get(id=j.id)\r\n                    b.paid=j.paid\r\n                    b.left_from_doc=b.paid-b.fees\r\n                    b.save()\r\n\r\n            elif fees1 < paid1:\r\n                \r\n                if j.paid < j.fees :\r\n                    print('this is <')\r\n                    a= paid1 - fees1\r\n                    b=j.fees-j.paid\r\n                    print('-----------')\r\n                    print(a)\r\n                    print(b)\r\n                    if a>=b:\r\n                        \r\n                        if a>b:\r\n                            j.paid=j.paid+b\r\n                            #a=a-b\r\n                            print('this is a>b')\r\n                            print(a)\r\n                    \r\n                            paid1=paid1-b\r\n                            paid=paid1\r\n                        elif a==b:\r\n                            print('this is a==b')\r\n                            print(a)\r\n                            j.paid=j.paid+b\r\n                            paid1=paid1-a\r\n                            paid=paid1\r\n\r\n\r\n                    elif a<b:\r\n                        \r\n                        print('this is a<b')\r\n                        j.paid=j.paid+a\r\n                        print(j.paid)\r\n                        paid1=paid1-a\r\n                        print(paid1)\r\n                        paid=paid1\r\n                   \r\n\r\n                    b=patient_health_detail.objects.get(id=j.id)\r\n                    b.paid=j.paid\r\n                    b.left_from_patient=b.fees-b.paid\r\n                    b.save()\r\n\r\n               \r\n        p1=patient_detail.objects.get(id=i)\r\n        user = patient_health_detail(patient_id=p1,fname = fname,lname = lname,report=report,refdoc=refdoc,date=date,time=time,fees=fees,paid=paid,paid_original=paid_og)\r\n        \r\n        \r\n        listIWantToStore1 = prescription\r\n        user.prescription = json.dumps(listIWantToStore1)\r\n\r\n        listIWantToStore2 = note\r\n        user.note = json.dumps(listIWantToStore2)\r\n\r\n        listIWantToStore3 = timee\r\n        user.m_time = json.dumps(listIWantToStore3)\r\n\r\n        listIWantToStore4 = countt\r\n        user.countt = json.dumps(listIWantToStore4)\r\n\r\n        listIWantToStore5 = symptoms\r\n        user.symptoms = json.dumps(listIWantToStore5)\r\n\r\n        listIWantToStore6 = diagnostic\r\n        user.diagnostic = json.dumps(listIWantToStore6)\r\n\r\n        listIWantToStore7 = schd_time\r\n        user.schd_time = json.dumps(listIWantToStore7)\r\n\r\n\r\n\r\n\r\n        listIWantToStore8 = medicine_outside\r\n        user.medicine_outside = json.dumps(listIWantToStore8)\r\n\r\n        listIWantToStore9 = schd_outside\r\n        user.schd_outside = json.dumps(listIWantToStore9)\r\n\r\n        listIWantToStore10 = time_outside\r\n        user.time_outside = json.dumps(listIWantToStore10)\r\n\r\n        listIWantToStore11 = note_outside\r\n        user.note_outside = json.dumps(listIWantToStore11)\r\n\r\n        listIWantToStore12 = count_outside\r\n        user.count_outside = json.dumps(listIWantToStore12)\r\n\r\n        user.save()\r\n        patient = patient_detail.objects.all()\r\n\r\n        \r\n        return redirect(reverse('addpatient_health_details', kwargs={'i':i}))\r\n        #return render(request,'home/index.html')#'home.html',{'patient':patient})\r\n\r\n\r\ndef editpatient_health_detail(request,i,k):\r\n    # i is pid # k is visit no\r\n    print(i)\r\n    if request.method==\"POST\":\r\n        t1=patient_detail.objects.get(id=i)\r\n        fname=t1.fname\r\n        lname=t1.lname\r\n        symptoms = request.POST.getlist('symptoms')\r\n        diagnostic = request.POST.getlist('diagnostic')\r\n        note = request.POST.getlist('note')\r\n        prescription = request.POST.getlist('prescription')\r\n        m_time = request.POST.getlist('time')\r\n        schd_time = request.POST.getlist('schdtime')\r\n        countt = request.POST.getlist('countt')\r\n        printpres = request.POST.getlist('printpres')\r\n        report = request.POST['report']\r\n        fees = request.POST['fees']\r\n        paid = request.POST['paid']\r\n\r\n        print('-------this are medicines data-------')\r\n        print(printpres)\r\n        #------------------------------logic for seprating scdh time----------\r\n        medicine_outside = []\r\n        schd_outside =[]\r\n        time_outside =[] \r\n        note_outside =[]\r\n        count_outside =[]  \r\n            \r\n        for l in printpres:# for converting to string\r\n            a=json.loads(l)\r\n            \r\n            medicine_outside.append(a[2])\r\n            time_outside.append(a[3])\r\n            note_outside.append(a[0])\r\n            count_outside.append(a[1])\r\n            schd_outside.append(a[4])\r\n\r\n        \r\n        for j in medicine_outside: #for removing medicine from precription\r\n            if j in prescription:\r\n                prescription.remove(j)\r\n\r\n        for j in time_outside: #for removing medicine from precription\r\n            if j in m_time:\r\n                m_time.remove(j)\r\n\r\n        for j in note_outside: #for removing medicine from precription\r\n            if j in note:\r\n                note.remove(j)\r\n\r\n        for j in count_outside: #for removing medicine from precription\r\n            if j in countt:\r\n                countt.remove(j)\r\n\r\n        for j in schd_outside: #for removing medicine from precription\r\n            if j in schd_time:\r\n                schd_time.remove(j)\r\n        \r\n\r\n        print('------- edit patient detILAS def this are medicines outside data-------')\r\n        print(medicine_outside)\r\n        print(schd_outside) \r\n        print(time_outside)\r\n        print(note_outside)\r\n        print(count_outside)  \r\n                \r\n\r\n        try:           #---------for ref doc\r\n            refdoc = request.POST['refdoc']\r\n        except MultiValueDictKeyError:\r\n            refdoc = ''\r\n            \r\n        date = datetime.date.today()\r\n        time=datetime.datetime.now().time()\r\n        paid_og=paid\r\n\r\n        print('------- edit patient detILAS def this are medicines data-------')\r\n        print(note)\r\n        print(prescription)\r\n        print(m_time)\r\n        print(countt)\r\n        print(schd_time)\r\n        # print('-----------------')\r\n        # print(printpres)\r\n        #--------------------calculation of settleing account when extra or lee money is added-------------------\r\n\r\n        patient_all_visit_acc=patient_health_detail.objects.filter(patient_id=i)\r\n\r\n        fees1=int(fees)\r\n        paid1=int(paid)\r\n        \r\n        for j in patient_all_visit_acc:\r\n            if fees1 > paid1:\r\n                if j.paid > j.fees:\r\n                    print('this is >')\r\n                    a = fees1-paid1\r\n                    b=j.paid-j.fees\r\n                    c=a-b\r\n                    #if c>=0:\r\n                    print('-this is b-')\r\n                    print(b)\r\n                    j.paid=j.paid-b\r\n                    print(paid1)\r\n                    paid1 = paid1+b\r\n                    print(paid1)\r\n                    paid = paid1\r\n                    \r\n                    \r\n                    b=patient_health_detail.objects.get(id=j.id)\r\n                    b.paid=j.paid\r\n                    b.left_from_doc=b.paid-b.fees\r\n                    b.save()\r\n\r\n            elif fees1 < paid1:\r\n                if j.paid < j.fees :\r\n                    print('this is <')\r\n                    a= paid1 - fees1\r\n                    b=j.fees-j.paid\r\n                    print('-----------')\r\n                    print(a)\r\n                    print(b)\r\n                    if a>=b:\r\n                        \r\n                        if a>b:\r\n                            j.paid=j.paid+b\r\n                            #a=a-b\r\n                            print('this is a>b')\r\n                            print(a)\r\n                    \r\n                            paid1=paid1-b\r\n                            paid=paid1\r\n                        elif a==b:\r\n                            print('this is a==b')\r\n                            print(a)\r\n                            j.paid=j.paid+b\r\n                            paid1=paid1-a\r\n                            paid=paid1\r\n\r\n                    elif a<b:\r\n                        print('this is a<b')\r\n                        j.paid=j.paid+a\r\n                        print(j.paid)\r\n                        paid1=paid1-a\r\n                        print(paid1)\r\n                        paid=paid1\r\n\r\n                    b=patient_health_detail.objects.get(id=j.id)\r\n                    b.paid=j.paid\r\n                    b.left_from_patient=b.fees-b.paid\r\n                    b.save()\r\n                    \r\n        patient_detail_object = patient_detail.objects.get(id=i)\r\n        patient_health_detail_object = patient_health_detail.objects.get(id=k)\r\n\r\n        patient_health_detail_object.patient_id = patient_detail_object\r\n        patient_health_detail_object.fname =fname\r\n        patient_health_detail_object.lname = lname\r\n        patient_health_detail_object.report = report\r\n        patient_health_detail_object.refdoc = refdoc\r\n        patient_health_detail_object.date = date\r\n        patient_health_detail_object.time = time\r\n        patient_health_detail_object.fees = fees\r\n        patient_health_detail_object.paid = paid\r\n        patient_health_detail_object.paid_original = paid_og\r\n\r\n        \r\n        listIWantToStore1 = prescription\r\n        patient_health_detail_object.prescription = json.dumps(listIWantToStore1)\r\n\r\n        listIWantToStore2 = note\r\n        patient_health_detail_object.note = json.dumps(listIWantToStore2)\r\n\r\n        listIWantToStore3 = m_time\r\n        patient_health_detail_object.m_time = json.dumps(listIWantToStore3)\r\n\r\n        listIWantToStore4 = countt\r\n        patient_health_detail_object.countt = json.dumps(listIWantToStore4)\r\n\r\n        listIWantToStore5 = symptoms\r\n        patient_health_detail_object.symptoms = json.dumps(listIWantToStore5)\r\n\r\n        listIWantToStore6 = diagnostic\r\n        patient_health_detail_object.diagnostic = json.dumps(listIWantToStore6)\r\n\r\n        listIWantToStore7 = schd_time\r\n        patient_health_detail_object.schd_time = json.dumps(listIWantToStore7)\r\n\r\n        listIWantToStore8 = medicine_outside\r\n        patient_health_detail_object.medicine_outside = json.dumps(listIWantToStore8)\r\n\r\n        listIWantToStore9 = schd_outside\r\n        patient_health_detail_object.schd_outside = json.dumps(listIWantToStore9)\r\n\r\n        listIWantToStore10 = time_outside\r\n        patient_health_detail_object.time_outside = json.dumps(listIWantToStore10)\r\n\r\n        listIWantToStore11 = note_outside\r\n        patient_health_detail_object.note_outside = json.dumps(listIWantToStore11)\r\n\r\n        listIWantToStore12 = count_outside\r\n        patient_health_detail_object.count_outside = json.dumps(listIWantToStore12)\r\n\r\n        patient_health_detail_object.save()\r\n        return redirect(reverse('addpatient_health_details', kwargs={'i':i}))\r\n\r\n\r\ndef edit_add_patient_health_detail(request,i,k):\r\n    patient = patient_detail.objects.get(id=i)\r\n    medi=Medicine.objects.all()\r\n    symp=Symptoms.objects.all()\r\n    dies=Disease.objects.all()\r\n    docgroup=Doc_group.objects.all()\r\n    patient_health = patient_health_detail.objects.get(id=k)\r\n\r\n    prescription_total =[]\r\n    note_total = []\r\n    time_total = []\r\n    schd_time_total = []\r\n    count_total = []\r\n\r\n    jsonDec = json.decoder.JSONDecoder()\r\n    symptoms = jsonDec.decode(patient_health.symptoms)\r\n    jsonDec = json.decoder.JSONDecoder()\r\n    diagnosis = jsonDec.decode(patient_health.diagnostic)\r\n\r\n    prescription  = jsonDec.decode(patient_health.prescription)\r\n    note  = jsonDec.decode(patient_health.note)\r\n    m_time  = jsonDec.decode(patient_health.m_time)\r\n    schd_time  = jsonDec.decode(patient_health.schd_time)\r\n    countt  = jsonDec.decode(patient_health.countt)\r\n\r\n    medicine_outside  = jsonDec.decode(patient_health.medicine_outside)\r\n    schd_outside  = jsonDec.decode(patient_health.schd_outside)\r\n    time_outside  = jsonDec.decode(patient_health.time_outside)\r\n    note_outside  = jsonDec.decode(patient_health.note_outside)\r\n    count_outside  = jsonDec.decode(patient_health.count_outside)\r\n\r\n    prescription_total=prescription+medicine_outside\r\n    note_total=note+note_outside\r\n    time_total=m_time+time_outside\r\n    schd_time_total=schd_time+schd_outside\r\n    count_total=countt+count_outside\r\n\r\n    note_total.pop(0)\r\n    time_total.pop(0)\r\n    schd_time_total.pop(0)\r\n    count_total.pop(0)\r\n\r\n    fees=patient_health.fees\r\n    paid=patient_health.paid\r\n    investigate=patient_health.report\r\n    \r\n    prescription_listJSON = json.dumps(prescription_total)\r\n    note_listJSON = json.dumps(note_total)\r\n    time_listJSON = json.dumps(time_total)\r\n    schd_time_listJSON = json.dumps(schd_time_total)\r\n    count_listJSON = json.dumps(count_total)\r\n    \r\n\r\n    return render(request,'home/edit_patient_healthdetails.html',{'patient':patient,'pid':i,'vid':k,'medi':medi,'symp':symp,'dies':dies,'docgroup':docgroup,'symptoms':symptoms,'diagnosis':diagnosis,'fees':fees,'paid':paid,'investigate':investigate,'prescription':prescription_listJSON,'note':note_listJSON,'time':time_listJSON,'schd_time':schd_time_listJSON,'count':count_listJSON})\r\n\r\ndef calclulation(i,j,pid):\r\n    if i == j:\r\n        Account.objects.filter(patient_id = pid).update(tleft_from_patient=0,tleft_from_doc=0)\r\n        return 0\r\n    elif i > j:\r\n        c=i-j\r\n        Account.objects.filter(patient_id = pid).update(tleft_from_patient=c,tleft_from_doc=0)\r\n        return c\r\n    elif j > i:\r\n        c=j-i\r\n        Account.objects.filter(patient_id = pid).update(tleft_from_doc=c,tleft_from_patient=0)\r\n        return c\r\n\r\ndef summary1(i,j):\r\n    s=patient_health_detail.objects.get(id=i)\r\n    #j is patient id and  i is visit no\r\n    g=patient_health_detail.objects.get(id=i)\r\n    \r\n\r\n    pid=j\r\n    p1=patient_detail.objects.get(id=pid)\r\n    paid=s.paid\r\n    fees=s.fees\r\n    d=patient_health_detail.objects.filter(patient_id=pid)\r\n    Total_FEES=0\r\n    Total_PAID=0\r\n    for g in d:\r\n     Total_FEES=Total_FEES+g.fees\r\n     Total_PAID=Total_PAID+g.paid\r\n    \r\n    try:\r\n     t=Account.objects.get(patient_id=pid)\r\n     if t != None:\r\n      Account.objects.filter(patient_id = pid).update(tfees=Total_FEES,tpaid=Total_PAID)\r\n      t=Account.objects.get(patient_id=pid)\r\n    except:\r\n     \r\n     Account(patient_id=p1,tfees=Total_FEES,tpaid=Total_PAID).save()\r\n     t=Account.objects.get(patient_id=pid)\r\n\r\n    if fees == paid:\r\n        calclulation(Total_FEES,Total_PAID,pid)\r\n        s=patient_health_detail.objects.get(id=i)\r\n        t=Account.objects.get(patient_id=pid)\r\n        pleft=0\r\n        dleft=0\r\n        patient_health_detail.objects.filter(id=i).update(left_from_patient=pleft,left_from_doc=dleft)\r\n        return 0\r\n\r\n    elif paid < fees:\r\n        calclulation(Total_FEES,Total_PAID,pid)\r\n        pleft=fees-paid\r\n        patient_health_detail.objects.filter(id=i).update(left_from_patient=pleft)\r\n        s=patient_health_detail.objects.get(id=i)\r\n        t=Account.objects.get(patient_id=pid)\r\n        \r\n        return 0\r\n    elif paid > fees:\r\n        calclulation(Total_FEES,Total_PAID,pid)\r\n        dleft=paid-fees\r\n        patient_health_detail.objects.filter(id=i).update(left_from_doc=dleft)\r\n        s=patient_health_detail.objects.get(id=i)\r\n        t=Account.objects.get(patient_id=pid)\r\n        \r\n        return 0\r\n\r\n\r\ndef visit_summary(request):\r\n    patient = patient_detail.objects.all().order_by('-id')\r\n    patient1 = patient_detail.objects.all()\r\n    paginator=Paginator(patient, 5)\r\n    page_number=request.GET.get('page')\r\n    page_obj=paginator.get_page(page_number)\r\n\r\n    for i in patient1:\r\n        particular_patient = patient_health_detail.objects.filter(patient_id=i.id)\r\n        for j in particular_patient:\r\n            summary1(j.id, i.id)\r\n\r\n\r\n        get_total_acc_patient = Account.objects.all().order_by('-patient_id')\r\n\r\n        patient_summary =[]\r\n    for p,n in zip(patient,get_total_acc_patient):\r\n        patient_summary.append({\"p\":p,\"n\":n})\r\n    return render(request,'home/visit_summary.html',{'page_obj':page_obj,'patient_summary':patient_summary})\r\n    \r\n\r\ndef particular_person_summary(request,i):\r\n    visit=patient_health_detail.objects.filter(patient_id=i).all().order_by('-id')\r\n    patient_info = patient_detail.objects.get(id=i)\r\n\r\n    #print(\"-------------------------------------------------\")\r\n    #print(visit.patient_visit)\r\n    #print(\"-------------------------------------------------\")\r\n    s={'patient':visit,'id':i,'patient_info':patient_info}\r\n    return render(request,'home/particular_patient.html',s)\r\n    \r\n\r\n    \r\ndef summary(request,i,j):\r\n    s=patient_health_detail.objects.get(id=i)\r\n    #j is patient id and  i is visit no\r\n    g=patient_health_detail.objects.get(id=i)\r\n\r\n    jsonDec = json.decoder.JSONDecoder()\r\n    prescription = jsonDec.decode(g.prescription)\r\n    note = jsonDec.decode(g.note)\r\n    m_time = jsonDec.decode(g.m_time)\r\n    countt = jsonDec.decode(g.countt)\r\n    schd_time = jsonDec.decode(g.schd_time)\r\n\r\n    jsonDec = json.decoder.JSONDecoder()\r\n    medicine_outside = jsonDec.decode(g.medicine_outside)\r\n    note_outside = jsonDec.decode(g.note_outside)\r\n    time_outside = jsonDec.decode(g.time_outside)\r\n    count_outside = jsonDec.decode(g.count_outside)\r\n    schd_outside = jsonDec.decode(g.schd_outside)\r\n\r\n    print(prescription)\r\n    print(note)\r\n    print(m_time)\r\n    print(countt)\r\n    print(schd_time)\r\n    \r\n    prescription_details = []\r\n    prescription_details_outside = []\r\n\r\n    print(medicine_outside)\r\n    print(note_outside)\r\n    print(time_outside)\r\n    print(count_outside)\r\n    print(schd_outside)\r\n\r\n    for p,n,t,c,st in zip(prescription,note,m_time,countt,schd_time):\r\n        prescription_details.append({\"p\":p,\"n\":n,\"t\":t,\"c\":c,\"st\":st})\r\n    print('-----------------------this is prescription details--------------')\r\n    print(prescription_details)\r\n\r\n    for op,on,ot,oc,ost in zip(medicine_outside,note_outside,time_outside,count_outside,schd_outside):\r\n        prescription_details_outside.append({\"op\":op,\"on\":on,\"ot\":ot,\"oc\":oc,\"ost\":ost})\r\n\r\n    pid=j\r\n    p1=patient_detail.objects.get(id=pid)\r\n    paid=s.paid\r\n    fees=s.fees\r\n    d=patient_health_detail.objects.filter(patient_id=pid)\r\n    Total_FEES=0\r\n    Total_PAID=0\r\n    for g in d:\r\n     Total_FEES=Total_FEES+g.fees\r\n     Total_PAID=Total_PAID+g.paid\r\n    \r\n    try:\r\n     t=Account.objects.get(patient_id=pid)\r\n     if t != None:\r\n      Account.objects.filter(patient_id = pid).update(tfees=Total_FEES,tpaid=Total_PAID)\r\n      t=Account.objects.get(patient_id=pid)\r\n    except:\r\n     \r\n     Account(patient_id=p1,tfees=Total_FEES,tpaid=Total_PAID).save()\r\n     t=Account.objects.get(patient_id=pid)\r\n\r\n    if fees == paid:\r\n        calclulation(Total_FEES,Total_PAID,pid)\r\n        s=patient_health_detail.objects.get(id=i)\r\n        t=Account.objects.get(patient_id=pid)\r\n        summary={'s':s,'t':t,'gender':p1.gender,'prescription_details':prescription_details,'prescription_details_outside':prescription_details_outside}\r\n        return render(request,'home/summary.html',summary)\r\n    elif paid < fees:\r\n        calclulation(Total_FEES,Total_PAID,pid)\r\n        pleft=fees-paid\r\n        patient_health_detail.objects.filter(id=i).update(left_from_patient=pleft)\r\n        s=patient_health_detail.objects.get(id=i)\r\n        t=Account.objects.get(patient_id=pid)\r\n        summary={'s':s,'t':t,'prescription_details':prescription_details,'prescription_details_outside':prescription_details_outside}\r\n        return render(request,'home/summary.html',summary)\r\n    elif paid > fees:\r\n        calclulation(Total_FEES,Total_PAID,pid)\r\n        dleft=paid-fees\r\n        patient_health_detail.objects.filter(id=i).update(left_from_doc=dleft)\r\n        s=patient_health_detail.objects.get(id=i)\r\n        t=Account.objects.get(patient_id=pid)\r\n        summary={'s':s,'t':t,'prescription_details':prescription_details,'prescription_details_outside':prescription_details_outside}\r\n        return render(request,'home/summary.html',summary)\r\n\r\n\r\n\r\ndef patient_group(request): \r\n    \r\n    p = patient_detail.objects.all()\r\n    return render(request,'home/patient_group.html',{'patient':p})\r\n\r\ndef create_group(request): \r\n    if request.method==\"POST\":\r\n        mem = request.POST.getlist('mselect')\r\n        mem_sep = []\r\n        for i in mem:\r\n         mem_sep.append(i.split(\":\"))\r\n\r\n\r\n        print(\"-------------------------------------------------\")\r\n        print(mem)\r\n        print(mem_sep)\r\n        print(mem_sep[0][0])\r\n        print(\"-------------------------------------------------\")\r\n\r\n        gname = request.POST['gname']\r\n        user=Patient_group(gname=gname)\r\n        listIWantToStore = mem_sep\r\n        user.member = json.dumps(listIWantToStore)\r\n        user.save()\r\n        g = Patient_group.objects.all()\r\n        s={'group':g}\r\n        return redirect('/all_group')\r\n        \r\n    else:\r\n         p = patient_detail.objects.all()\r\n         s={'patient':p}\r\n         return render(request,'home/patient_group.html',s)\r\n        \r\ndef all_group(request): \r\n    g = Patient_group.objects.all().order_by('id')\r\n    paginator=Paginator(g, 5)\r\n    page_number=request.GET.get('page')\r\n    page_obj=paginator.get_page(page_number)    \r\n    \r\n    return render(request,'home/all_group.html',{'group':g,'page_obj':page_obj})\r\n\r\n\r\ndef particular_group(request,i):\r\n    #here i is gid\r\n    g=Patient_group.objects.get(id=i)\r\n    jsonDec = json.decoder.JSONDecoder()\r\n    gList = jsonDec.decode(g.member)\r\n    mem_sep = []\r\n    mem_sep1 = []\r\n    \r\n    for i in gList:\r\n        #print(\"this is i\")\r\n        #print(i[0])#pid is patient id\r\n        pid = i[0]\r\n        advance_summ=patient_health_detail.objects.filter(patient_id=pid)\r\n        for j in advance_summ:\r\n            #print(\"this is j\")\r\n            #print(j.id)\r\n            summary1(j.id, pid )#j.id is visit no\r\n    \r\n    for j in gList:\r\n        mem_sep.append({\"id\":j[0],\"name\":j[1]})\r\n        \r\n    print(\"-------------------------------------------------\")\r\n    #print(mem_sep)\r\n    print(mem_sep[0][\"id\"])\r\n    print(\"-------------------------------------------------\")\r\n    Total_Group_paid=0\r\n    Total_Group_fees=0\r\n    Total_Group_from_patient=0\r\n    Total_Group_from_doc=0\r\n    \r\n    dleft_account = []\r\n    pleft_account = []\r\n    #print(\"-------------------------------------------------\")\r\n    for i in gList:\r\n        #print(i[0])#pid is patient id\r\n        pid = i[0]\r\n        #print(pid)\r\n        #print(\"-------------------------------------------------\")\r\n        \r\n        #print(i[0])#pid is patient id\r\n        pid = i[0]\r\n        #print(pid)\r\n    #print(\"-------------------------------------------------\")\r\n        o = Account.objects.get(patient_id=pid)\r\n        o1 = patient_detail.objects.get(id=pid)\r\n        print(o.tfees)\r\n        print(o1)\r\n   \r\n        Total_Group_paid=Total_Group_paid+o.tpaid\r\n        Total_Group_fees=Total_Group_fees+o.tfees\r\n        Total_Group_from_patient=Total_Group_from_patient+o.tleft_from_patient\r\n        Total_Group_from_doc=Total_Group_from_doc+o.tleft_from_doc\r\n\r\n        if o.tleft_from_patient != 0:\r\n            pleft_account.append({'fname':o1.fname,'lname':o1.lname,'left':o.tleft_from_patient})\r\n            mem_sep1.append({\"id\":i[0],\"name\":i[1],\"pleft\":o.tleft_from_patient,\"dleft\":0})\r\n        else:\r\n            #pleft_account.append({'fname':o1.fname,'lname':o1.lname,'left':0})\r\n\r\n            if o.tleft_from_doc != 0:\r\n                dleft_account.append({'fname':o1.fname,'lname':o1.lname,'left':o.tleft_from_doc}) \r\n                mem_sep1.append({\"id\":i[0],\"name\":i[1],\"pleft\":0,\"dleft\":o.tleft_from_doc})\r\n            else:\r\n                dleft_account.append({'fname':o1.fname,'lname':o1.lname,'left':0}) \r\n                mem_sep1.append({\"id\":i[0],\"name\":i[1],\"pleft\":0,\"dleft\":o.tleft_from_doc})\r\n    \r\n    print(\"-------------------------------------------------\")\r\n        \r\n    p = patient_detail.objects.all()\r\n    s={'list':mem_sep,'list1':mem_sep1,'patient':p,'tpaid':Total_Group_fees,'tfees':Total_Group_paid,'tfrom_patient':Total_Group_from_patient,'tfrom_doc':Total_Group_from_doc,'list_pleft':pleft_account,'list_dleft':dleft_account}\r\n    return render(request,'home/particular_group.html',s)\r\n        \r\n        #    return render(request,'home/pageadddata.html')\r\n\r\n\r\n\r\ndef statistic(request):\r\n   \r\n    try:\r\n        patient = patient_detail.objects.all()\r\n        total_patient=0\r\n        current_month_patient=0\r\n        current_month_revenue=0\r\n        today_patient=0\r\n        today_revenue=0\r\n        daily_patient_list =[]\r\n        daily_revenue_list =[]\r\n        date_list=[]\r\n        temp=[]\r\n\r\n        \r\n        #-------------calulate total patient----------------\r\n        for i in patient:\r\n            total_patient=total_patient+1\r\n        #---------------------calculate current month patient revenue---------\r\n        total_patient_month=0\r\n        date = datetime.date.today()\r\n        last_date=date.day\r\n        end_date = datetime.date.today()    \r\n        start_date = end_date - datetime.timedelta(last_date)       \r\n        monthly_id=patient_health_detail.objects.filter(date__range=[start_date,end_date])\r\n\r\n        for i in monthly_id:\r\n        #print(i.id)\r\n        #print(i.fees)\r\n            current_month_patient=current_month_patient+1\r\n            current_month_revenue=current_month_revenue+i.fees\r\n            temp.append(str(i.date.day))\r\n        \r\n        for i in temp:\r\n            if i not in date_list:\r\n                date_list.append(i)\r\n\r\n    #--------------------current_month_new_patient -------------------------\r\n        current_month_new_patient=0  \r\n        current_month_new_patient_list=[]\r\n        monthly_id=patient_health_detail.objects.filter(date__range=[start_date,end_date]).only('patient_id')\r\n\r\n        for i in monthly_id:\r\n            if i.patient_id.id not in current_month_new_patient_list:\r\n                current_month_new_patient_list.append(i.patient_id.id)\r\n                current_month_new_patient=current_month_new_patient+1\r\n            else:\r\n                continue\r\n        #print(current_month_new_patient_list)\r\n            \r\n\r\n    #--------------------calculate today patient and revenue--------------------------\r\n        today_patient_object=patient_health_detail.objects.filter(date=date)\r\n        for i in today_patient_object:\r\n            today_patient=today_patient+1\r\n            today_revenue=today_revenue+i.fees\r\n        \r\n    #-------------------------------------------calculate daily revenue and patient-----------------------------\r\n        date_temp=0\r\n        for i in monthly_id:\r\n            daily_patient=0\r\n            daily_revenue=0\r\n            \r\n            if date_temp == i.date: # to ignore same date as there are many enrty on one day\r\n                continue\r\n            else:\r\n                date_temp=i.date\r\n                particular_date_object=patient_health_detail.objects.filter(date=i.date)\r\n\r\n                for j in particular_date_object:\r\n                    daily_patient=daily_patient+1\r\n                    daily_revenue=daily_revenue+j.fees\r\n\r\n                daily_patient_list.append({\"date\":i.date.day,\"patient\":daily_patient})\r\n                daily_revenue_list.append({\"date\":i.date.day,\"revenue\":daily_revenue})\r\n                \r\n                daily_patient_list1=[]\r\n                daily_revenue_list1=[]\r\n                k=0\r\n                j=0\r\n                for i in range(1, 32, 1):\r\n                    \r\n                    if daily_patient_list[k][\"date\"] == i:\r\n                        a=daily_patient_list[k][\"patient\"]\r\n                        daily_patient_list1.append(a)\r\n                        k=k+1\r\n                        if k>=len(daily_patient_list):\r\n                            break\r\n                    else:\r\n                        daily_patient_list1.append(0)\r\n                \r\n                k=0\r\n                j=0\r\n                for i in range(1, 32, 1):\r\n                    if j>=len(daily_revenue_list):\r\n                        break\r\n                    if daily_revenue_list[j][\"date\"] == i:\r\n                        b=daily_revenue_list[j][\"revenue\"]\r\n                        daily_revenue_list1.append(b)\r\n                        j=j+1\r\n                        \r\n                    else:\r\n                        daily_revenue_list1.append(0)\r\n                        \r\n\r\n\r\n                    # print('--this is daily patient---')\r\n                    # print(daily_patient_list1)\r\n                    # print(daily_revenue_list1)\r\n                    # print('--this is daily patient abc---')\r\n                    # print(daily_patient_list)\r\n                    # print(daily_revenue_list)\r\n\r\n                daily_patient_list_data = {'daily_patient_list':daily_patient_list1}      \r\n                daily_revenue_list_data =  {'daily_revenue_list':daily_revenue_list1}    \r\n                daily_patient_listJSON = dumps(daily_patient_list_data)\r\n                daily_revenue_listJSON = dumps(daily_revenue_list_data)\r\n\r\n    #-----------------------------------------------calculate monthly revenue and patient-------------------------------\r\n        monthly_revenue_list=patient_health_detail.objects.annotate(month=TruncMonth('date')).values('month').annotate(total_revenue=Sum('fees')).order_by('month').annotate(extract_month=ExtractMonth('month')).annotate(extract_year=ExtractYear('month'))\r\n        monthly_patient_list=patient_health_detail.objects.annotate(month=TruncMonth('date')).values('month').annotate(total_patient=Count('id')).order_by('month').annotate(extract_month=ExtractMonth('month')).annotate(extract_year=ExtractYear('month'))\r\n        # print(\"---------------this is j------------------\")\r\n        # for j in monthly_revenue_list:\r\n        #      print(j)\r\n        # print(\"---------------this is j------------------\")\r\n        # for j in monthly_patient_list:\r\n        #     print(j[\"extract_year\"])\r\n\r\n        monthly_patient_list2=[]\r\n        monthly_revenue_list2=[]\r\n\r\n        date1=datetime.date.today()\r\n        year1=date1.year\r\n        \r\n\r\n        for j in monthly_patient_list:\r\n            if j[\"extract_year\"] == year1:\r\n                monthly_patient_list2.append({'month':j[\"extract_month\"],'patient':j[\"total_patient\"],'year':j[\"extract_year\"]})\r\n        j=0\r\n        for j in monthly_revenue_list:\r\n            if j[\"extract_year\"] == year1:\r\n                monthly_revenue_list2.append({'month':j[\"extract_month\"],'revenue':j[\"total_revenue\"],'year':j[\"extract_year\"]})\r\n\r\n        # print(\"---------------this is lentgh------------------\")\r\n        # print(len(monthly_revenue_list2))\r\n        # print(\"---------------this is ------------------\")\r\n        # print(monthly_patient_list2)\r\n        # print(monthly_revenue_list2)\r\n\r\n        monthly_patient_list1=[]\r\n        monthly_revenue_list1=[]\r\n\r\n        k=0\r\n       \r\n        for i in range(1, 13, 1):\r\n            if k>=len(monthly_patient_list2):\r\n                \r\n                break \r\n            if monthly_patient_list2[k][\"month\"] == i:\r\n                a=monthly_patient_list2[k][\"patient\"]\r\n                monthly_patient_list1.append(a)\r\n                k=k+1\r\n            else:\r\n                monthly_patient_list1.append(0)\r\n           \r\n\r\n        # print(\"---------------this is list1 ------------------\")\r\n        # print(monthly_patient_list1)\r\n        k=0\r\n        for i in range(1, 13, 1):\r\n            if k>=len(monthly_revenue_list2):\r\n                    break        \r\n            if monthly_revenue_list2[k][\"month\"] == i:\r\n                a=monthly_revenue_list2[k][\"revenue\"]\r\n                monthly_revenue_list1.append(a)\r\n                k=k+1\r\n            else:\r\n                monthly_revenue_list1.append(0)\r\n\r\n        monthly_patient_list_data = {'monthly_patient_list':monthly_patient_list1}      \r\n        monthly_revenue_list_data =  {'monthly_revenue_list':monthly_revenue_list1}    \r\n        monthly_patient_listJSON = dumps(monthly_patient_list_data)\r\n        monthly_revenue_listJSON = dumps(monthly_revenue_list_data)\r\n\r\n\r\n\r\n        #-------------------------------calculate yearly data---------------------------------------\r\n        date2=datetime.date.today()\r\n        year2=date.year\r\n\r\n        yearly_revenue_list=patient_health_detail.objects.annotate(year=TruncYear('date')).values('year').annotate(total_revenue=Sum('fees')).order_by('year').annotate(extract_month=ExtractMonth('year')).annotate(extract_year=ExtractYear('year'))\r\n        yearly_patient_list=patient_health_detail.objects.annotate(year=TruncYear('date')).values('year').annotate(total_patient=Count('id')).order_by('year').annotate(extract_month=ExtractMonth('year')).annotate(extract_year=ExtractYear('year'))\r\n\r\n        # print(\"---------------this is yearly_revenue_list------------------\")\r\n        # for j in yearly_revenue_list:\r\n        #      print(j)\r\n        # print(\"---------------this is yearly_patient_lis------------------\")\r\n        # for j in yearly_patient_list:\r\n        #     print(j)\r\n\r\n        yearly_patient_list2=[]\r\n        yearly_revenue_list2=[]\r\n\r\n\r\n        for j in yearly_patient_list:\r\n           \r\n            yearly_patient_list2.append({'patient':j[\"total_patient\"],'year':j[\"extract_year\"]})\r\n        j=0\r\n        for j in yearly_revenue_list:\r\n            \r\n            yearly_revenue_list2.append({'revenue':j[\"total_revenue\"],'year':j[\"extract_year\"]})\r\n\r\n        # print(\"---------------this is lentgh------------------\")\r\n        # print(len(yearly_revenue_list2))\r\n        # print(\"---------------this is yearly_patient_list yearly_revenue_list------------------\")\r\n        # print(yearly_patient_list2)\r\n        # print(yearly_revenue_list2)\r\n\r\n        yearly_patient_list1=[]\r\n        yearly_revenue_list1=[]\r\n\r\n        k=0\r\n\r\n        for i in range(2, 10, 1):\r\n            #print(i)\r\n            if k>=len(yearly_patient_list2):\r\n                \r\n                break \r\n            if yearly_patient_list2[k][\"year\"] == (2020+i):\r\n              \r\n                a=yearly_patient_list2[k][\"patient\"]\r\n                yearly_patient_list1.append(a)\r\n                k=k+1\r\n            else:\r\n                yearly_patient_list1.append(0)\r\n           \r\n\r\n        #print(\"---------------this is list year ------------------\")\r\n        #print(yearly_patient_list1)\r\n        k=0\r\n        for i in range(2,10, 1):\r\n            if k>=len(yearly_revenue_list2):\r\n                    break        \r\n            if yearly_revenue_list2[k][\"year\"] == (2020+i):\r\n                a=yearly_revenue_list2[k][\"revenue\"]\r\n                yearly_revenue_list1.append(a)\r\n                k=k+1\r\n            else:\r\n                yearly_revenue_list1.append(0)\r\n\r\n        # print(\"---------------this is list year 12------------------\")\r\n        # print(yearly_revenue_list1)\r\n\r\n        yearly_patient_list_data = {'yearly_patient_list':yearly_patient_list1}      \r\n        yearly_revenue_list_data =  {'yearly_revenue_list':yearly_revenue_list1}    \r\n        yearly_patient_listJSON = dumps(yearly_patient_list_data)\r\n        yearly_revenue_listJSON = dumps(yearly_revenue_list_data)\r\n\r\n        \r\n    \r\n        # print(\"---------------------------------\")\r\n        # print(current_month_patient)\r\n        # print(current_month_revenue)\r\n        # print(total_patient)  \r\n        # print(today_patient)  \r\n        # print(today_revenue)\r\n        # print(\"-------------daily patient og--------------------\")\r\n        # print(daily_patient_list)#done\r\n        # print(daily_revenue_list)#done\r\n        # print(\"-------------daily patient--------------------\")\r\n        # print(daily_patient_list1)#done\r\n        # print(daily_revenue_list1)#done\r\n        # print(\"---------------------------------\")\r\n        # print('--this is monthly patient---')\r\n        # print(monthly_patient_list1)\r\n        # print(monthly_revenue_list1)\r\n        # print('--this is monthly patient og---')\r\n        # print(monthly_patient_list)\r\n        # print(monthly_revenue_list)\r\n        # print('--this is yearly patient---')\r\n        # print(yearly_patient_list1)\r\n        # print(yearly_revenue_list1)\r\n        # print(end_date) \r\n        # print(start_date) \r\n        # print(date_list)\r\n\r\n\r\n        \r\n        data_for_statistics={'yearly_patient_list':yearly_patient_listJSON ,'yearly_revenue_list':yearly_revenue_listJSON ,'daily_patient_list': daily_patient_listJSON,'daily_revenue_list':daily_revenue_listJSON,'monthly_patient_list':monthly_patient_listJSON,'monthly_revenue_list':monthly_revenue_listJSON,'today_patient':today_patient,'today_revenue':today_revenue,'total_patient':total_patient,'current_month_new_patient':current_month_new_patient}\r\n        return render(request,'home/index.html', data_for_statistics)\r\n\r\n    except:\r\n        today_patient=0\r\n        today_revenue=0\r\n        total_patient=0\r\n        daily_patient_list1=[]\r\n        daily_revenue_list1=[]\r\n        monthly_patient_list1=[]\r\n        monthly_revenue_list1=[]\r\n        daily_patient_list_data = {'daily_patient_list':daily_patient_list1}      \r\n        daily_revenue_list_data =  {'daily_revenue_list':daily_revenue_list1}    \r\n        daily_patient_listJSON = dumps(daily_patient_list_data)\r\n        daily_revenue_listJSON = dumps(daily_revenue_list_data)\r\n\r\n        monthly_patient_list_data = {'monthly_patient_list':monthly_patient_list1}      \r\n        monthly_revenue_list_data =  {'monthly_revenue_list':monthly_revenue_list1}    \r\n        monthly_patient_listJSON = dumps(monthly_patient_list_data)\r\n        monthly_revenue_listJSON = dumps(monthly_revenue_list_data)\r\n\r\n\r\n        data_for_statistics={'daily_patient_list': daily_patient_listJSON,'daily_revenue_list':daily_revenue_listJSON,'monthly_patient_list':monthly_patient_listJSON,'monthly_revenue_list':monthly_revenue_listJSON,'today_patient':today_patient,'today_revenue':today_revenue,'total_patient':total_patient}\r\n        return render(request,'home/index.html', data_for_statistics)\r\ndef settle_account(request,pid):\r\n    #pid is pid\r\n    o=patient_detail.objects.get(id=pid)\r\n    advance_summ=patient_health_detail.objects.filter(patient_id=pid)\r\n\r\n    for j in advance_summ:\r\n          \r\n            summary1(j.id,pid)\r\n\r\n    if request.method==\"POST\":\r\n        new_pamount = request.POST['new_pamount']\r\n        new_damount = request.POST['new_damount']\r\n\r\n        new_pamount1=int(new_pamount)\r\n        new_damount1=int(new_damount)\r\n\r\n        if new_damount1 and new_pamount1 > 0:\r\n            return render(request,'home/page-500.html')\r\n\r\n        if new_damount1 != 0:\r\n            patient_all_visit_acc=patient_health_detail.objects.filter(patient_id=pid)\r\n\r\n            for i in patient_all_visit_acc:\r\n                if i.fees == i.paid:\r\n                    pass\r\n\r\n                elif i.left_from_doc != 0:\r\n\r\n                    a =i.paid-i.fees\r\n                    print('this is a')\r\n                    print(a)\r\n\r\n                    if new_damount1 >= a:\r\n                        print('>=')\r\n                        new_damount1=new_damount1-a\r\n                        i.paid=i.paid-a\r\n                        b=patient_health_detail.objects.get(id=i.id)\r\n                        b.paid=i.paid\r\n                        b.save()\r\n\r\n                    elif new_damount1==0:\r\n                        print('=')\r\n                        pass\r\n\r\n                    elif new_damount1 < a:\r\n                       print('<=')\r\n                       c = a-new_damount1\r\n                       print('this is c')\r\n                       print(c)\r\n                       \r\n\r\n                       #new_damount1=new_damount1-c\r\n                       i.paid=i.paid-new_damount1\r\n                       b=patient_health_detail.objects.get(id=i.id)\r\n                       b.paid=i.paid\r\n                       b.save()\r\n                       new_damount1=0\r\n\r\n        else:\r\n           \r\n            patient_all_visit_acc=patient_health_detail.objects.filter(patient_id=pid)\r\n\r\n            for i in patient_all_visit_acc:\r\n                if i.fees == i.paid:\r\n                    pass\r\n\r\n                elif i.left_from_patient != 0:\r\n\r\n                    a =i.fees-i.paid\r\n                    print('this is a')\r\n                    print(a)\r\n\r\n                    if new_pamount1 >= a:\r\n                        print('>=')\r\n                        new_pamount1=new_pamount1-a\r\n                        i.paid=i.paid+a\r\n                        b=patient_health_detail.objects.get(id=i.id)\r\n                        b.paid=i.paid\r\n                        b.save()\r\n                    elif new_pamount1==0:\r\n                        print('=')\r\n                        pass\r\n                    elif new_pamount1 < a:\r\n                       print('<=')\r\n                       c = a-new_pamount1\r\n                       print('this is c')\r\n                       print(c)\r\n                       #new_pamount1=new_pamount1-c\r\n                       i.paid=i.paid+new_pamount1\r\n                       b=patient_health_detail.objects.get(id=i.id)\r\n                       b.paid=i.paid\r\n                       b.save()\r\n                       new_pamount1=0\r\n\r\n\r\n        advance_summ=patient_health_detail.objects.filter(patient_id=pid)\r\n        for j in advance_summ:\r\n          \r\n            summary1(j.id,pid)\r\n                 \r\n             \r\n        patient_account = Account.objects.get(patient_id=pid)\r\n\r\n        return render(request,'home/particular_patient_settle_account.html',{'patient_account':patient_account,'patient':o})\r\n    else:\r\n        patient_account = Account.objects.get(patient_id=pid)\r\n        \r\n        return render(request,'home/particular_patient_settle_account.html',{'patient_account':patient_account,'patient':o})\r\n        \r\ndef ref_doctor(request):\r\n\r\n    if request.method == 'POST':\r\n        doc_list = []\r\n        query = request.POST['search1']\r\n        name = RefDoc.objects.all().filter((Q(name__icontains = query)))\r\n        print(name)\r\n        for i in name:\r\n            doc_list.append({'name':i.name,'details':i.details})\r\n            print(i.id)\r\n            print(i.details)\r\n        return render(request,'home/ref_doc.html',{'doc_list':doc_list})\r\n    else:\r\n         return render(request,'home/ref_doc.html')\r\n\r\n\r\ndef search_patient(request):\r\n    if request.method=='POST':\r\n            query=request.POST['search']\r\n            lookups=Q(fname__icontains=query)|Q(lname__icontains=query)|Q(contact__icontains=query)\r\n            results=patient_detail.objects.filter(lookups).distinct()\r\n            print(results)\r\n            if len(results)== 0:\r\n                    return render(request,\"home/patients.html\",{'error':'NOT FOUND'})\r\n            context={'page_obj':results}\r\n            template_name='home/patients.html'\r\n            return render(request,template_name,context)\r\n\r\n        # else:\r\n        #     return redirect('main_patient')\r\n    else:\r\n        return render(request, 'home/patients.html')\r\n\r\n\r\ndef search_patient_summary(request):\r\n    if request.method=='POST':\r\n            query=request.POST['search']\r\n            lookups=Q(fname__icontains=query)|Q(lname__icontains=query)|Q(contact__icontains=query) #__iexact can be also used\r\n            results=patient_detail.objects.filter(lookups).distinct()\r\n            print(results)\r\n            if len(results)== 0:\r\n                    return render(request,\"home/visit_summary.html\",{'error':'NOT FOUND'})\r\n            context={'page_obj':results}\r\n            template_name='home/visit_summary.html'\r\n            return render(request,template_name,context)\r\n    \r\n    else:\r\n        return render(request, 'home/visit_summary.html')\r\n\r\ndef search_patient_Group(request):\r\n\r\n    if request.method=='POST':\r\n            query=request.POST['search']\r\n            lookups=Q(gname__icontains=query)\r\n            results=Patient_group.objects.filter(lookups).distinct()\r\n            print(results)\r\n            if len(results)== 0:\r\n                    return render(request,\"home/all_group.html\",{'error':'NOT FOUND'})\r\n            context={'page_obj':results}\r\n            template_name='home/all_group.html'\r\n            return render(request,template_name,context)\r\n    \r\n    else:\r\n        return render(request, 'home/all_group.html')\r\n\r\ndef search_patient_Today(request):\r\n\r\n    if request.method=='POST':\r\n            date = datetime.date.today()\r\n           \r\n            query=request.POST['search']\r\n            lookups=Q(fname__icontains=query)|Q(lname__icontains=query)\r\n            results=patient_health_detail.objects.filter(lookups).distinct().filter(date=date)\r\n            print(results)\r\n            if len(results)== 0:\r\n                    return render(request,\"home/all_group.html\",{'error':'NOT FOUND'})\r\n            context={'page_obj':results}\r\n            template_name='home/today_patient.html'\r\n            return render(request,template_name,context)\r\n    \r\n    else:\r\n        return render(request, 'home/today_patient.html')\r\n\r\n\r\n\r\n    \r\ndef delete_patient(request,i):\r\n    patient=patient_detail.objects.get(id=i)\r\n    print('================================')\r\n    print('deleting')\r\n    print(patient)\r\n    patient.delete()\r\n    print('===================================')\r\n    return redirect('main_patient')\r\n\r\ndef delete_group(request,i):\r\n    grp=Patient_group.objects.get(id=i)\r\n    print(grp)\r\n    grp.delete()\r\n    return redirect('all_group')\r\ndef today_patient(request):\r\n    date = datetime.date.today()\r\n    today_patient_object=patient_health_detail.objects.filter(date=date)\r\n    for i in today_patient_object:\r\n        print(i.patient_id.id)\r\n    context={'page_obj':today_patient_object}\r\n    template_name='home/today_patient.html'\r\n    return render(request,template_name,context)\r\n\r\n#first-14\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/loginmodule/views.py b/loginmodule/views.py
--- a/loginmodule/views.py	(revision 20c122e16d4e3b34ad742ec9bf461c4b2c1815a0)
+++ b/loginmodule/views.py	(date 1679832420948)
@@ -1482,6 +1482,7 @@
     template_name='home/today_patient.html'
     return render(request,template_name,context)
 
-#first-14
+45456
+#first-16
 
-
+45645
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"768aaf55-5e07-4fae-8ba3-b4717b4ee5b6\" name=\"Changes\" comment=\"first-13\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/master\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <excluded-from-favorite>\r\n      <branch-storage>\r\n        <map>\r\n          <entry type=\"LOCAL\">\r\n            <value>\r\n              <list>\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"master\" />\r\n              </list>\r\n            </value>\r\n          </entry>\r\n        </map>\r\n      </branch-storage>\r\n    </excluded-from-favorite>\r\n    <favorite-branches>\r\n      <branch-storage>\r\n        <map>\r\n          <entry type=\"LOCAL\">\r\n            <value>\r\n              <list>\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"second-branch\" />\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"first-branch\" />\r\n              </list>\r\n            </value>\r\n          </entry>\r\n        </map>\r\n      </branch-storage>\r\n    </favorite-branches>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"master\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/loginmodule/views.py\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2NEKpGVSyCYpenMENmzoIfCb1pI\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/sahil/OneDrive/Desktop/New folder/clinicsoftware&quot;\r\n  }\r\n}</component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"768aaf55-5e07-4fae-8ba3-b4717b4ee5b6\" name=\"Changes\" comment=\"\" />\r\n      <created>1679223983030</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1679223983030</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"second\">\r\n      <created>1679224013707</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679224013707</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first-1\">\r\n      <created>1679231614193</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679231614193</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"second-1\">\r\n      <created>1679231844446</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679231844446</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"second-2\">\r\n      <created>1679293706569</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679293706569</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"second-2-resolve\">\r\n      <created>1679294057902</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679294057902</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"second-3\">\r\n      <created>1679294136636</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679294136636</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"second-5\">\r\n      <created>1679294207590</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679294207590</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"second-5\">\r\n      <created>1679294464222</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679294464222</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"first-1\">\r\n      <created>1679294933249</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679294933249</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"first-1\">\r\n      <created>1679295633867</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679295633867</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"first-1\">\r\n      <created>1679295948093</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679295948093</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"second-2\">\r\n      <created>1679298979026</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679298979026</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"first-3\">\r\n      <created>1679300765599</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679300765599</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"first-3\">\r\n      <created>1679826611850</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679826611850</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"first-6\">\r\n      <created>1679829451883</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679829451883</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"first-2\">\r\n      <created>1679829549968</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679829549968</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"first-3\">\r\n      <created>1679829605541</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679829605541</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"first-9\">\r\n      <created>1679829888277</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679829888277</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"first-9\">\r\n      <created>1679830631789</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679830631789</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"first-11\">\r\n      <created>1679830779208</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679830779208</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"first-13\">\r\n      <created>1679830976422</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679830976422</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"first-13\">\r\n      <created>1679831251008</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679831251008</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"23\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"first\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"origin/second\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"second-branch\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"first-branch\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"master\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"origin/master\" />\r\n                </option>\r\n              </RecentGroup>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"HEAD\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"second\" />\r\n    <MESSAGE value=\"second-2-resolve\" />\r\n    <MESSAGE value=\"second-3\" />\r\n    <MESSAGE value=\"second-5\" />\r\n    <MESSAGE value=\"first-1\" />\r\n    <MESSAGE value=\"second-1\" />\r\n    <MESSAGE value=\"second-2\" />\r\n    <MESSAGE value=\"first-6\" />\r\n    <MESSAGE value=\"first-2\" />\r\n    <MESSAGE value=\"first-3\" />\r\n    <MESSAGE value=\"first-9\" />\r\n    <MESSAGE value=\"first-11\" />\r\n    <MESSAGE value=\"first-13\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"first-13\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 20c122e16d4e3b34ad742ec9bf461c4b2c1815a0)
+++ b/.idea/workspace.xml	(date 1679832576299)
@@ -4,8 +4,8 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="768aaf55-5e07-4fae-8ba3-b4717b4ee5b6" name="Changes" comment="first-13">
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+    <list default="true" id="768aaf55-5e07-4fae-8ba3-b4717b4ee5b6" name="Changes" comment="first-15">
+      <change beforePath="$PROJECT_DIR$/loginmodule/views.py" beforeDir="false" afterPath="$PROJECT_DIR$/loginmodule/views.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -231,7 +231,14 @@
       <option name="project" value="LOCAL" />
       <updated>1679831251008</updated>
     </task>
-    <option name="localTasksCounter" value="23" />
+    <task id="LOCAL-00023" summary="first-15">
+      <created>1679832320002</created>
+      <option name="number" value="00023" />
+      <option name="presentableId" value="LOCAL-00023" />
+      <option name="project" value="LOCAL" />
+      <updated>1679832320002</updated>
+    </task>
+    <option name="localTasksCounter" value="24" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -304,6 +311,7 @@
     <MESSAGE value="first-9" />
     <MESSAGE value="first-11" />
     <MESSAGE value="first-13" />
-    <option name="LAST_COMMIT_MESSAGE" value="first-13" />
+    <MESSAGE value="first-15" />
+    <option name="LAST_COMMIT_MESSAGE" value="first-15" />
   </component>
 </project>
\ No newline at end of file
